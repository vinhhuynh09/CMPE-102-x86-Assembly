comment @
***********************************************************************
* Name: Vinh Huynh
* Assignment: CMPE 102 Project 4
* Course: CMPE 102. Spring Semester 2023
* Date: May 07, 2023
*
* Description:
Write the program that displays stack addresses and 32-bit values which are pushed on the stack when the procedures are called. 
The contents must be displayed in order from the lowest address to the highest address. 
The program should generate the similar output shown below.

Specifications:
o Define a macro named displayText to display a string. This macro has the following parameters:
o text - It is a string which is displayed on the screen.
o newLine - It is any integer which indicates that the new line character should be printed. 
  If no integer is passed, no new line character is printed. For example, displayText "Hello World" prints "Hello World", 
  and displayText "Hello World", 1 prints "Hello Word" and a new line character.
o In the main procedure, use the CALL instruction (do not use INVOKE) to call the runLevelOne procedure. 
  Push five variables (num1, num2, num3, num4, and num5) which are initialized with 1h, 2h, 3h, 4h, and 5h on the stack for this call.
o In runLevelOne, use the CALL instruction again to call the runLevelTwo procedure. Use the number of variables as a parameter for this call.
o Clean up the stack before your program returns to main using the STDCALL calling convention. Do not use the C calling convention.
o In addition to other instructions, operators, and directives, the following items must be used in the program:
o $
o CALL
o PUSH
o POP
o TYPE
o IF, ELSE
o EQ
o PUSHA
o POPA
o Note that the addresses generated by your computer may be different from the sample run/output, but they should be incremented correctly.

System Parameters on Stack
----------------------------------------

Address: 0093F8D0H => Content: 00000001H
Address: 0093F8D4H => Content: 00000002H
Address: 0093F8D8H => Content: 00000003H
Address: 0093F8DCH => Content: 00000004H
Address: 0093F8E0H => Content: 00000005H

----------------------------------------

@
include Irvine32.inc
.386
.stack 4096

ExitProcess PROTO, dwExitCode:DWORD

;*****************************************************
;	macroDisplayText
;	Description: text - It is a string which is displayed on the screen.
;                newLine - It is any integer which indicates that the new line character should be printed. 
;				 If no integer is passed, no new line character is printed. 
;		         For example, macroDisplayText "System Parameters on Stack" prints "System Parameters on Stack", 
;				 and macroDisplayText "System Parameters on Stack", 1 prints "System Parameters on Stack" and a new line character.
;	Receives: text (require as first parameter) and will display on the screen.
;			  newLine (optional. Default is -1). If no integer is passed, no new line character is printed.
;	Returns: nothing
;*****************************************************
macroDisplayText MACRO text:REQ, newLine := < -1 >	
	LOCAL string
	.data					; local data
	string BYTE text,0			; define the string
	.code
	push edx
	mov  edx,OFFSET string	
	if newLine EQ -1			; because requirements asked to use IF and ELSE,
						; I have to call Writestring two times.
		call Writestring		; print only the string, but no new line
	else					
		call Writestring
		call Crlf			; print new line
	endif
	pop  edx
ENDM

.data
;***********************************************************
num1 DWORD 1h			
num2 DWORD 2h
num3 DWORD 3h
num4 DWORD 4h
num5 DWORD 5h
numberOfVariables EQU ($ - num1) / TYPE num1	; numberOfVariables = number of declared variable. 
						; in this program numberOfVariables = 5, num1 -> num5
						; Also, this meets requirement to use $ and TYPE

contentStr		BYTE "Content: ",0
dashStr			BYTE "----------------------------------------",0
arrowContentStr BYTE " => Content: ",0
addStr			BYTE "Address: ",0

.code
;******************************************
main PROC
;******************************************
	macroDisplayText "System Parameters on Stack",1		; pass in 1 or any integer for newline.
;	macroDisplayText "System Parameters on Stack"		; This line was commented out on purpose. Second parameter is blank. This will NOT print new line.

	call printDashLine
	call runLevelOne
	call printDashLine

  INVOKE ExitProcess,0
main ENDP

;******************************************
;   runLevelOne: call runLevelTwo proc
;	Receives: nothing
;	Returns: nothing
;******************************************
runLevelOne PROC
	push num5		; per requirement, push all five parameters on the stack
	push num4
	push num3
	push num2
	push num1
	call runLevelTwo

	ret	
runLevelOne ENDP

;******************************************
;   runLevelTwo: Loop through what was push on the stack and display the address and contents.
;	Receives: see what was push on the stack from caller runLevelOne
;			num5, num4, num3, num2, num1
;	Returns: nothing
;******************************************
runLevelTwo PROC 
	pusha					; per requirement
	push ebp
	mov ebp,esp
	add ebp,40				; 32 bytes for pusha, and another 8 (ebp and return address) was pushed. 
	mov ecx,numberOfVariables		; loop 5 times
L1:
	mov  edx,OFFSET addStr
	call Writestring			; print "Address: "

	mov eax,ebp
	call WriteHex				; print address of num#
	mov al,'H'				; append char 'H' at the end of the address
	call WriteChar

	mov  edx,OFFSET arrowContentStr	 
	call Writestring			; print "=> Content: "

	mov eax,[ebp]
	call WriteHex				; print the actual content
	mov al,'H'				; append char 'H' at the end of the content
	call WriteChar
	add ebp,TYPE DWORD			; go to next address
	call Crlf
	Loop L1					; loop to L1
	
	mov ebp,esp
	pop ebp
	popa					; per requirement

	ret 20					; clean up the stack

runLevelTwo ENDP

;******************************************
;   printDashLine: Print dashStr
;	Receives: Nothing
;	Returns: Nothing
;******************************************
printDashLine PROC 
	mov  edx,OFFSET dashStr		
	call Writestring			; print "----------------------------------------"
	call Crlf
	ret 					
printDashLine ENDP

END main        ;last line for the entire program
